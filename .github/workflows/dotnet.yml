name: .NET Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/Journey/**'
      - 'src/Gateway.Bff/**'
      - 'src/Notification.Api/**'
      - 'src/Reward.Worker/**'
      - '.github/workflows/dotnet.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/Journey/**'
      - 'src/Gateway.Bff/**'
      - 'src/Notification.Api/**'
      - 'src/Reward.Worker/**'

env:
  DOTNET_VERSION: '8.0.x'
  COVERAGE_THRESHOLD: 80

jobs:
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: journey_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
    
    - name: Run unit tests
      run: |
        dotnet test --no-build --configuration Release --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage \
          --logger trx \
          --settings coverlet.runsettings
      working-directory: tests
    
    - name: Generate coverage report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator \
          -reports:"tests/**/coverage.cobertura.xml" \
          -targetdir:"coverage-report" \
          -reporttypes:"Html;Cobertura;Badges"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage-report/Cobertura.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: true
    
    - name: Coverage Badge
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: coverage-report/Cobertura.xml
        badge_title: Backend Coverage
        badge_label: Coverage
        format: cobertura
        hide_branch_rate: false
        hide_complexity: true
        thresholds: '80 90 95'

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Journey API
      uses: docker/build-push-action@v5
      with:
        context: ./src/Journey
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/journey-api:latest
          ${{ secrets.DOCKER_USERNAME }}/journey-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Gateway
      uses: docker/build-push-action@v5
      with:
        context: ./src/Gateway.Bff
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/gateway-bff:latest
          ${{ secrets.DOCKER_USERNAME }}/gateway-bff:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Notification API
      uses: docker/build-push-action@v5
      with:
        context: ./src/Notification.Api
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/notification-api:latest
          ${{ secrets.DOCKER_USERNAME }}/notification-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      run: |
        dotnet list package --vulnerable --include-transitive
        dotnet list package --deprecated --include-transitive
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/dotnet@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/staging/
    
    - name: Run integration tests
      run: |
        echo "Running integration tests against staging..."
        # Add integration test commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production/
    
    - name: Health check
      run: |
        echo "Running health checks..."
        # Add health check commands here
